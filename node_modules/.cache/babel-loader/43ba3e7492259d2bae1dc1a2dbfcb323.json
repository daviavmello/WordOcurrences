{"ast":null,"code":"var _jsxFileName = \"/Users/davimello/Desktop/mello-textanalyzer/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import './App.css';\nconst cheerio = require(\"cheerio\");\n\nconst axios = require(\"axios\");\n\nlet array = []; // https://cors-anywhere.herokuapp.com/\n\nconst App = () => {\n  axios.get(\"https://secret-ocean-49799.herokuapp.com/http://shakespeare.mit.edu/macbeth/full.html\").then(res => {\n    const $ = cheerio.load(res.data);\n    const text = $(\"html\").text();\n    const words = text.toLowerCase().replace(/[^a-zA-Z ]/g, \" \").replace(/\\s\\s+/g, \" \").split(\" \");\n    words.forEach(currentWord => {\n      if (array.some(object => object.word === currentWord)) {\n        const findObject = array.find(object => object.word === currentWord);\n        findObject.count += 1;\n      } else {\n        array.push({\n          word: currentWord,\n          count: 1\n        });\n      }\n    });\n    array = array.sort((a, b) => a.count < b.count ? 1 : -1); // console.dir(sortedArray, {'maxArrayLength': null})\n    // console.log(sortedArray);\n  });\n  console.log(array);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: array.map(object => {\n      // for (let i = 0; i < 20; i++) {\n      console.log(array);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: object.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }, this); // }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/davimello/Desktop/mello-textanalyzer/src/App.js"],"names":["cheerio","require","axios","array","App","get","then","res","$","load","data","text","words","toLowerCase","replace","split","forEach","currentWord","some","object","word","findObject","find","count","push","sort","a","b","console","log","map"],"mappings":";;;AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIE,KAAK,GAAG,EAAZ,C,CACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAElBF,EAAAA,KAAK,CAACG,GAAN,CAAU,uFAAV,EAAmGC,IAAnG,CAAyGC,GAAD,IAAS;AAC/G,UAAMC,CAAC,GAAGR,OAAO,CAACS,IAAR,CAAaF,GAAG,CAACG,IAAjB,CAAV;AACA,UAAMC,IAAI,GAAGH,CAAC,CAAC,MAAD,CAAD,CAAUG,IAAV,EAAb;AACA,UAAMC,KAAK,GAAGD,IAAI,CACfE,WADW,GAEXC,OAFW,CAEH,aAFG,EAEY,GAFZ,EAGXA,OAHW,CAGH,QAHG,EAGO,GAHP,EAIXC,KAJW,CAIL,GAJK,CAAd;AAMAH,IAAAA,KAAK,CAACI,OAAN,CAAeC,WAAD,IAAiB;AAC7B,UAAId,KAAK,CAACe,IAAN,CAAYC,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBH,WAAvC,CAAJ,EAAyD;AACvD,cAAMI,UAAU,GAAGlB,KAAK,CAACmB,IAAN,CAAYH,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgBH,WAAvC,CAAnB;AACAI,QAAAA,UAAU,CAACE,KAAX,IAAoB,CAApB;AACD,OAHD,MAGO;AACLpB,QAAAA,KAAK,CAACqB,IAAN,CAAW;AAAEJ,UAAAA,IAAI,EAAEH,WAAR;AAAqBM,UAAAA,KAAK,EAAE;AAA5B,SAAX;AACD;AACF,KAPD;AAQApB,IAAAA,KAAK,GAAGA,KAAK,CAACsB,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,KAAF,GAAUI,CAAC,CAACJ,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAA/C,CAAR,CAjB+G,CAkB/G;AACA;AACD,GApBD;AAsBAK,EAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACA,sBACE;AAAA,cACGA,KAAK,CAAC2B,GAAN,CAAUX,MAAM,IAAI;AACnB;AACES,MAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACJ,0BAAO;AAAA,kBAAMgB,MAAM,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP,CAHqB,CAIrB;AACC,KALA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAUC,CAnCD;;KAAMhB,G;AAqCN,eAAeA,GAAf","sourcesContent":["// import './App.css';\nconst cheerio = require(\"cheerio\");\nconst axios = require(\"axios\");\n\nlet array = [];\n// https://cors-anywhere.herokuapp.com/\n\nconst App = () => {\n\naxios.get(\"https://secret-ocean-49799.herokuapp.com/http://shakespeare.mit.edu/macbeth/full.html\").then((res) => {\n  const $ = cheerio.load(res.data);\n  const text = $(\"html\").text();\n  const words = text\n    .toLowerCase()\n    .replace(/[^a-zA-Z ]/g, \" \")\n    .replace(/\\s\\s+/g, \" \")\n    .split(\" \");\n\n  words.forEach((currentWord) => {\n    if (array.some((object) => object.word === currentWord)) {\n      const findObject = array.find((object) => object.word === currentWord);\n      findObject.count += 1;\n    } else {\n      array.push({ word: currentWord, count: 1 });\n    }\n  });\n  array = array.sort((a, b) => (a.count < b.count ? 1 : -1));\n  // console.dir(sortedArray, {'maxArrayLength': null})\n  // console.log(sortedArray);\n});\n\nconsole.log(array);\nreturn (\n  <div>\n    {array.map(object => {\n      // for (let i = 0; i < 20; i++) {\n        console.log(array);\n    return <div>{object.word}</div>\n    // }\n    })}\n  </div>\n)\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}